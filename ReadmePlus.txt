ПРЕДПОЛОЖЕНИЯ И НЕКОТОРЫЕ ИЗМЕНЕНИЯ, ЛЕЖАЩИЕ В ОСНОВЕ CourseModel:

    1) изменил возвращаемые значения следующих методов -
       Получить_список_прослушанных_курсов (c void на List; в классе Студент),
       Получить_текущий_средний_балл (c void на Integer; в классе Прохождение_курса),
       Получить_финальную_отметку (с void на Integer; в классе Прохождение_курса). Почему я это сделал?
       Во-первых, сами названия методов - начинаются с слова "Получить...", что уже подразумевает какое-то
       значение (не void). Во-вторых, если оставить void в методах, тогда класс Прохождение_курса
       нельзя будет изменять (я имею ввиду список оценок. Дело в том, что метод
       Получить_список_прослушанных_курсов говорит о том, что курсы могут быть и не прослушанные.
       Например, я только половину курса прошел и нельзя сказать, что я его уже полностью прослушал.
       А курс будет считаться прослушанным только в том случае, если у меня стоит финальная отметка.
       И именно наличие этой финальной отметки, говорит о завершенности курса каким-то студентом.
       А значит, у меня должен быть какой-то способ получить в классе Студент финальну отметку из
       класса Прохождение_курса. Также сама финальная отметка, считается следующим образом -->
       (текущий_средний_балл + экзамен) / 2 )!!

    2) поле Средняя_успеваемость в классе Студент инициализируется при вызове метода toString().
       Во-первых, в конструкторе я задать это значение не могу, так как Средняя_успеваемость считается
       от прослушанных курсов (иначе я создаю студента и должен задать успеваемость, хотя он
       только что поступил в универ!). Во-вторых, мне не пришло в голову, как я могу проинициализировать
       эту переменную при завершении курса, и при этом не нарушить данную мне диаграмму классов (мне
       пришлось бы добавить еще одну связь между классами).

    3) Класс Прохождение_курса связан лишь с одним конкретным курсом.

    4) В класс Прохождение_курса добавил метод addScore(int n) - т.е. после создания объекта (когда студент
       записался на курс) заполняем его оценками (11 оценок - 10 обычых + 1 экзаменационная), что и значит
       что курс прослушивается.

    5) Документацию я не написал, так как в задании этого не требовалось (да и сами public-методы с говорящим названием).

    6) API потоко-небезопасно, так как в задании этого не требовалось.


ИНСТРУКЦИИ ПО ИСПОЛЬЗОВАНИЮ:

    1) Вначале, создаем объекты класса Course.

    2) Создаем объекты класса Professor и добавляем их в наши курсы (из класса Course) при помощи метода
       addProfessor(Professor p).

    3) Создаем объкты класса Student (в конструктор надо передать, кроме всего прочего, список
       курсов на которые новоиспеченный студент подписался - минимум один курс должен быть).

    4) Для того, чтобы показать, что студент проходит какой-то курс - а) получаем объект PassingCourse
       при помощи метода getPassingCourse(Course course); б) затем заносим оценки (для того чтобы пройти курс,
       надо 11 отметок, значения отметок - 2, 3, 4 и 5) при помощи метода addScore(int n).

    5) Также есть методы на удаление проффесоров и студентов, метод на получение прослушанных курсов.

    6) После работы с моделью, я могу сериализовать объекты в один файл с расширением .json (обязательно указать
       расширение; writeModel(String fileName, Object... obj)) и затем диссериализовать их и получить список
       элементов (обязательно указать расширение .json; readModel(String fileName)).